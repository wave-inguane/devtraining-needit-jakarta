<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_user_delegate</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Delegate Update</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	var myDate = gs.nowNoTZ(); //get current date and time
	var gdt = new GlideDateTime(myDate); // convert to glide date time object
	var epoch = gdt.getNumericValue(); // get numeric millisecond value for compare
	var test1 = current.ends;  // get the ends time of the delegation
	var gdt3 = new GlideDateTime(test1); // convert to glide date time object
	var epoch3 = gdt3.getNumericValue(); // get numeric millisecond value for compare
	var myCheck = epoch3 - epoch; // subtract the ends time from the current time
	myCheck = myCheck / 1000;  // convert from milliseconds to seconds
	if(myCheck > 0){  // if the ends time is in the future then we are ok
		endCheck = true;
	}
	else{ // ends time is not in the future
		gs.addErrorMessage('Ends date and time must be in the future.  Please update below and submit again.');
		current.setAbortAction(true);
	}
	var startDate = current.starts; // get the starts time of the delegation
	var gdt2 = new GlideDateTime(startDate); // convert to glide date time object
	var epoch2 = gdt2.getNumericValue(); // get numeric millisecond value for compare
	var testDiff = epoch3 - epoch2;
	testDiff = testDiff / 1000;
	if(testDiff > 0){
		diffCheck = true;
	}
	else{ // ends time is not after the starts time
		gs.addErrorMessage('Starts date and time must be before the Ends date and time.  Please update below and submit again.');
		current.setAbortAction(true);
	}
	
	if(endCheck && diffCheck){
		gs.eventQueue("sys_user_delegate.notify_delegate", current);
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-15 23:11:18</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5c642d314fc303003b564ea18110c769</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Delegate Update</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_5c642d314fc303003b564ea18110c769</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-12-15 23:11:18</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=5c642d314fc303003b564ea18110c769"/>
</record_update>
