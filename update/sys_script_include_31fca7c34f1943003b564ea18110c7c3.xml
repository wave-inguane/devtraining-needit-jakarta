<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_58872_needit.GetInguaneSIBR</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>GetInguaneSIBR</name>
        <script><![CDATA[//InguanejsC1: code
/*
Functionality:
Query the DataBase
Parameters - Type
inguaneDB - GlideRecord Instance
queryString - String "Encoded query String"
keyValueDataPair - JSON Object
classAndFunctionName - JSON Object
Return:
All matches
 */
var GetInguaneSIBR = Class.create();
GetInguaneSIBR.prototype = {
	initialize: function () {
	},
	
	inguaneSiBrGetAll: function (inguaneDB, queryString, keyValueDataPair, classAndFunctionName) {
		var brsemaphore = { x: 1 };
			
			this._P(brsemaphore);//AquireLock
			//do work
			var gdt = new GlideDateTime();
			
			gs.addInfoMessage("$SERVER$: Script Include { GetInguaneSIBR } Invoked By: " + classAndFunctionName.ClassName + " " + classAndFunctionName.FunctionName + " @  " + gdt);
				inguaneDB.query();//needed to get the row count
				gs.addInfoMessage("$SERVER$: AquireLock : " + brsemaphore.x + " TOTAL RECORDS : " + inguaneDB.getRowCount());
		//------------------------------------------------------------------
				var myArray = [];
				
				inguaneDB.addEncodedQuery(queryString);
				inguaneDB.query();
				
				while (inguaneDB.next()) {
					var keyValuePair = { dataKey: "", dataValue: "" };
						keyValuePair.dataKey = keyValueDataPair.key; //get from client
						keyValuePair.dataValue = inguaneDB.getDisplayValue(keyValueDataPair.value);
						
						myArray.push(keyValuePair);
					}
					//finished work
					this._V(brsemaphore);//ReleaseLock
					gs.addErrorMessage("$SERVER$: ReleaseLock : " + brsemaphore.x + " TOTAL RECORDS : " + inguaneDB.getRowCount());
					return myArray;
		//--------------------------------------------------------------------------------
				},
				_P: function (sem) {
					while (sem.x <= 0);
						sem.x--;
				},
				_V: function (sem) {
					sem.x++;
				},
				_getSystemTableFields: function (curretTable) {
					var inguane_sys_table_fields = curretTable;
					var found = 0;
					//var currentFields = [];
					inguane_sys_table_fields.initialize();
					for (var f in inguane_sys_table_fields) {
						//currentFields.push(f);
						gs.addInfoMessage(f + " : " + inguane_sys_table_fields[f]);
						found++;
					}
					gs.addErrorMessage("TOTAL FIELDS : " + found);
				},
				type: 'GetInguaneSIBR'
			};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-09-24 06:30:39</sys_created_on>
        <sys_id>31fca7c34f1943003b564ea18110c7c3</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>GetInguaneSIBR</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_include_31fca7c34f1943003b564ea18110c7c3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-09-25 15:58:57</sys_updated_on>
    </sys_script_include>
</record_update>
